# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="qvrS[/b=c@t=<[;dR3_GPrwwn;9sDP=mXFf/b1@MV9D9raWRx;:h72pDQB];XlbH"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
application.global=global.Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
db.default.driver="org.sqlite.JDBC"
db.default.url="jdbc:sqlite:db/pelagios-api.db"

# Postgres configuration example
# db.default.driver="org.postgresql.Driver"
# db.default.url="jdbc:postgresql://localhost/recogito"
# db.default.user="postgres"
# db.default.password="postgres"

# Admin username/password - IMPORTANT: change this when moving app into production!
admin.user = admin	
admin.password = admin

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

# API specific settings
# ~~~~~

# Set to true if the application should add the "Access-Control-Allow-Origin" -> "*" header
# for CORS support. Note that this needs to be set to false, if CORS is enabled through
# a proxy setting
api.enable.cors=false

# Gazetteer dump files
api.gazetteer.files="pleiades-20120826-migrated.ttl.gz, dare.ttl.gz"
